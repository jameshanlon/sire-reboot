val S is 1024: 
val N is 10:
val CLIENTS is 4:
val M is CLIENTS:

function h(val v) is ... :

server Table() is ... :

server Store() is
  interface(call 
    read(val i, var v), 
    write(val i, val v)
  ) to
{ t is Table(S):
  alt 
  { accept read(val addr, var v): 
      t.lookup(addr, v)
  | accept write(val addr, val v):
    { var s: t.search(addr, s);
      if s ~= NONE
      then t.update(addr, v) 
      else t.insert(addr, v) 
    } 
  }
}:

server Access(server Store[N] s) is
  interface(call 
      read(val addr, var v), 
      write(val addr, val v)
  ) to
  alt
  { accept read(val addr, var v):
      s[h(addr)].read(addr, v)
  | accept write(val addr, val v):
      s[h(addr)].write(addr, v)
}:

server ParallelRAM() inherits
  from
  { s is [N] Store():
    a is [M] Access(s) }
  interface a

m is ParallelRAM():
par[i=0 for CLIENTS]
{ m[i].write(addr, 42); 
  m[i].read(addr, v)
}


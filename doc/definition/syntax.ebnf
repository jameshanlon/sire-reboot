% symbol is   <x>
% terminal is "x"
% produces is "="
% or is       "|"
% end is      ";"
% Separate everything with spaces


% ============================================================================
[Program]
% ============================================================================

program             = <specification> ":" <program>
                    | <sequence>;


% ============================================================================
[Specifications]
% ============================================================================

specification       = <declaration>
                    | <abbreviation>
                    | {0 "&" <specification>};

declaration         = <specifier> {1 "," <name> };

abbreviation        = <specifier> <name> "is" <element>
                    | <specifier> <name> "(" {0 "," <formal> } ")" "is" <element>
                    | "val" <name> "is" <expression>;

specifier           = <type>
                    | <type> <name>
                    | <type> <interface>
                    | <specifier> "[" "]"
                    | <specifier> "[" <expression> "]";

type                = "var"
                    | "chan"
                    | "call"
                    | "function"
                    | "process"
                    | "server";


% ============================================================================
[Primitive commands]
% ============================================================================

primitive-command   = <skip>
                    | <stop>
                    | <assignment>
                    | <input>
                    | <output>;

skip                = "skip";

stop                = "stop";

assignment          = <element> ":=" <expression>;

input               = <element> "?" <element>;

output              = <element> "!" <expression>;


% ============================================================================
[Structured commands]
% ============================================================================

structured-command  = <alternation>
                    | <conditional>
                    | <case>
                    | <loop>
                    | <sequence>
                    | <parallel>;

% Test
conditional         = "test" "{" {0 "|" <choice> "}"
                    | "if" <expression> "do" <command>
                    | "if" <expression> "then" <command> "else" <command>
                    | "unless" <expression> "do" <command>
                    | "unless" <expression> "then" <command> "else" <command>
                    | <command> "if" <expression>
                    | <command> "unless" <expression>;

choice              = <guarded-choice>
                    | <conditional>
                    | <specification> ":" <choice>;

guarded-choice      = <expression> ":" <command>;

% Loop
loop                = "while" <expression> "do" <command>
                    | "until" <expression> "do" <command>
                    | "do" <command> "while" <expr>
                    | "do" <command> "until" <expr>;

% Case
case                = "case" "(" <expression> ")" "{" {0 "|" <selection>} "}";

selection           = <expression> ":" <command>
                    | "else" <process>;

% Alternative
alternation         = "alt" "{" {0 "|" <alternative>} "}";

alternative         = <guarded-alternative>
                    | <alternation>
                    | <specification> ":" <alternative>;

guarded-alternative = <guard> ":" <command>;

guard               = <input>
                    | <expression> "&" <input>
                    | <expression> "&" <skip>;

% Sequence
sequence            = {0 ";" <command> };

% Parallel
parallel            = {0 ";" <command> };

% Command
command             = <primitive-command>
                    | <structured-command>
                    | <specification> ":" <command>;


% ============================================================================
[Server]
% ============================================================================

server              = <interface> "to" <declaration>
                    | <interface> "to" "{" {1 ":" <declaration> } "}";

declaration         = "initial" <command>
                    | "final" <command>
                    | <alternation>;

guard               = "accept" <name> "(" {0 "," <formal>} ")"
                    | <expression> "&" "accept" <name> "(" {0 "," <formal>} ")";


declaration         = "server" <name> "is" <server>
                    | "server" <name> "is" "[" {1 "," <server> } "]"
                    | "from" "{" {1 ":" <declaration>} "}" "interface" <name>;

command             = <element> "(" {0 "," <actual>} ")";


% ============================================================================
[Replication]
% ============================================================================

conditional         = "if" <replicator> <choice>;

case                = "case" <replicator> <selection>;

alternation         = "alt" <replicator> <alternative>;

declaration         = "server" <name> "is" <replicator> <server>;

replicator          = "[" {1 "," <range>} "]";

range               = <name> "=" <expression> "for" <expression>
                    | <name> "=" <expression> "for" <expression> "step" <expression>;

sequence            = "seq" {1 "," <range>} "do" <command>;

parallel            = "par" {1 "," <range>} "do" <command>;


% ============================================================================
[Elements]
% ============================================================================

element             = <element> "[" <expression> "]"
                    | <field>
                    | <name>;

field               = <element> "." <name>;


% ============================================================================
[Expressions]
% ============================================================================

expression          = <unary-operator> <operand>
                    | <operand> <binary-operator> <operand>
                    | <operand>;

operand             = <element>
                    | <literal>
                    | "(" <expression> ")"
                    | "(" <valof> ")";

literal             = <decimal-integer>
                    | "#" <hexdecimal-integer>
                    | <byte>
                    | "true"
                    | "false";

decimal-integer     = <digit>
                    | <digit> <decimal-integer>;

hexdecimal-integer  = <hexdecimal-digit>
                    | <hexdecimal-digit> <hexdecimal-integer>;

byte                = "'" <character> "'";

valof               = "valof" <cmd> "result" <expression>
                    | <specification> ":" <valof>;


% ============================================================================
[Abstraction]
% ============================================================================

specification       = <definition>;

definition          = <procedure>
                    | <function>;

procedure           = "process" <name> "(" {0 "," <formal>} ")" "is" <process>
                    | "server" <name> "(" {0 "," <formal>} ")" "is" <server>
                    | "server" <name> "(" {0 "," <formal>} ")" "provides" <hiding-declaration>;

function            = "function" <name> "(" {0 "," <formal>} ")" "is" <valof>
                    | "function" <name> "(" {0 "," <formal>} ")" "is" <expression>;

formal              = <specifier> <name>
                    | <specifier> <name> "(" {0 "," <formal> } ")"
                    | "val" <name>;

process             = <instance>;

server              = <instance>;

command             = <instance>;

expression          = <instance>;

instance            = <name> "(" {0 "," <actual>} ")";

actual              = <element>
                    | <expression>;

